{"version":3,"sources":["config.js","pages/Login.js","pages/Signup.js","App.js","serviceWorker.js","index.js"],"names":["this","config","configReady","BACKEND_API_URL","Login","props","state","email","password","errors","onLogin","bind","formIsValid","lastAtPos","lastIndexOf","lastDotPos","indexOf","length","setState","axios","defaults","baseURL","Config","handleValidation","alert","method","url","data","headers","then","res","status","catch","err","console","log","className","type","onChange","e","target","value","placeholder","name","onClick","href","Component","SignUp","onSignup","App","to","id","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.098bdab2.chunk.js","sourcesContent":["class Config {\r\n    constructor() {\r\n        this.config = {};\r\n        this.configReady = false;\r\n        // Deploy Url\r\n        \r\n        this.BACKEND_API_URL = \"http://ec2-13-59-196-27.us-east-2.compute.amazonaws.com:8001/\";\r\n        // Local Url\r\n        // this.BACKEND_API_URL = \"http://192.168.11.23:8001/\";\r\n    }\r\n}\r\n\r\nexport default (new Config());","import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\nimport Config from '../config';\r\n\r\nexport default class Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = { email: \"\", password: \"\", errors: []};\r\n    this.onLogin = this.onLogin.bind(this);\r\n  }\r\n  handleValidation(){\r\n    let errors = {};\r\n    let formIsValid = true;\r\n\r\n    //Email\r\n    if(this.state.email == \"\"){\r\n      formIsValid = false;\r\n      errors[\"email\"] = \"Cannot be empty\";\r\n    }\r\n    else {\r\n      let lastAtPos = this.state.email.lastIndexOf('@');\r\n      let lastDotPos = this.state.email.lastIndexOf('.');\r\n\r\n      if (!(lastAtPos < lastDotPos && lastAtPos > 0 && this.state.email.indexOf('@@') == -1 && lastDotPos > 2 && (this.state.email.length - lastDotPos) > 2)) {\r\n        formIsValid = false;\r\n        errors[\"email\"] = \"Email is not valid\";\r\n      }\r\n    }\r\n\r\n    this.setState({errors: errors});\r\n    return formIsValid;\r\n  }\r\n  onLogin() {\r\n    axios.defaults.baseURL = Config.BACKEND_API_URL;\r\n    if(!this.handleValidation()){\r\n      alert(\"Form has errors.\")\r\n    }\r\n    axios({\r\n      method: 'post',\r\n      url: '/auth/login',\r\n      data: {\r\n        email: this.state.email,\r\n        password:  this.state.password\r\n      },\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      }\r\n    })\r\n    .then((res) => {\r\n      if (res.data.status == \"success\") {\r\n        alert(\"Login success\");\r\n      }\r\n      if (res.data.status == \"no user\") {\r\n        alert(\"Wrong credential\");\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      alert(\"Something went wrong\");\r\n    })\r\n  }\r\n  render() {\r\n    console.log(this.state);\r\n    return (\r\n      <div>\r\n        <h3>Sign In</h3>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Email address</label>\r\n          <input type=\"email\" onChange= {(e) => this.setState({'email': e.target.value})} className=\"form-control\" placeholder=\"Enter email\" />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Password</label>\r\n          <input type=\"password\" name=\"password\" onChange= {(e) => this.setState({'password': e.target.value})} className=\"form-control\" placeholder=\"Enter password\" />\r\n        </div>\r\n\r\n        <button className=\"btn btn-primary btn-block\" onClick={this.onLogin}>Sign In</button>\r\n        <p className=\"forgot-password text-right\">\r\n          Forgot <a href=\"#\">password?</a>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\nimport Config from '../config';\r\n\r\nexport default class SignUp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = { email: \"\", password: \"\" };\r\n    this.onSignup = this.onSignup.bind(this);\r\n  }\r\n  onSignup() {\r\n    console.log(\"signup\",Config.BACKEND_API_URL);\r\n    axios.defaults.baseURL = Config.BACKEND_API_URL;\r\n\r\n    axios({\r\n      method: 'post',\r\n      url: '/auth/signup',\r\n      data: {\r\n        email: this.state.email,\r\n        password:  this.state.password\r\n      },\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      }\r\n    })\r\n    .then((res) => {\r\n      console.log(\"RESPONSE RECEIVED: \", res);\r\n      if (res.data.status == \"success\") {\r\n        alert(\"Success\");\r\n      }\r\n      if (res.data.status == \"exist\") {\r\n        alert(\"Already registered\");\r\n      }\r\n      if (res.data.status == \"error\") {\r\n        alert(\"Something went wrong\");\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"AXIOS ERROR: \", err);\r\n    })\r\n\r\n  }\r\n  render() {\r\n    console.log(this.state);\r\n    return (\r\n      <div>\r\n        <h3>Sign Up</h3>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Email address</label>\r\n          <input type=\"email\" name=\"email\" onChange= {(e) => this.setState({'email': e.target.value})} className=\"form-control\" placeholder=\"Enter email\" />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Password</label>\r\n          <input type=\"password\" name=\"password\" onChange= {(e) => this.setState({'password': e.target.value})} className=\"form-control\" placeholder=\"Enter password\" />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary btn-block\" onClick={this.onSignup}>Sign Up</button>\r\n        <p className=\"forgot-password text-right\">\r\n          Already registered <a href=\"#\">sign in?</a>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nimport Login from \"./pages/Login\";\r\nimport SignUp from \"./pages/Signup\";\r\n\r\nfunction App() {\r\n  return (<Router>\r\n    <div className=\"App\">\r\n      <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\r\n        <div className=\"container\">\r\n          <Link className=\"navbar-brand\" to={\"/sign-in\"}>positronX.io</Link>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\r\n            <ul className=\"navbar-nav ml-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to={\"/sign-in\"}>Login</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to={\"/sign-up\"}>Sign up</Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <div className=\"auth-wrapper\">\r\n        <div className=\"auth-inner\">\r\n          <Switch>\r\n            <Route exact path='/' component={Login} />\r\n            <Route path=\"/sign-in\" component={Login} />\r\n            <Route path=\"/sign-up\" component={SignUp} />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </div></Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}